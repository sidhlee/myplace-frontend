{"version":3,"sources":["shared/components/UIElements/LoadingSpinner.js","shared/components/UIElements/Card.js","shared/context/auth-context.js","shared/components/UIElements/Backdrop.js","shared/components/FormElements/Button.js","shared/components/UIElements/ErrorModal.js","shared/hooks/http-hook.js","shared/components/UIElements/Modal.js","shared/hooks/auth-hook.js","shared/components/UIElements/Avatar.js","user/components/UserItem.js","user/components/UsersList.js","user/pages/Users.js","shared/components/Navigation/MainHeader.js","shared/components/Navigation/NavLinks.js","shared/components/Navigation/SideDrawer.js","shared/components/Navigation/MainNavigation.js","App.js","index.js"],"names":["LoadingSpinner","props","className","asOverlay","Card","style","children","AuthContext","createContext","isLoggedIn","userId","token","login","logout","Backdrop","ReactDOM","createPortal","onClick","handleClick","document","getElementById","Button","classes","size","inverse","danger","href","to","exact","type","disabled","ErrorModal","onCancel","onClear","header","show","error","footer","useHttpClient","useState","isLoading","setIsLoading","setError","activeHttpRequest","useRef","sendRequest","useCallback","url","a","method","body","headers","httpAbortController","AbortController","current","push","fetch","signal","response","json","responseData","filter","reqControl","ok","Error","message","useEffect","forEach","abortController","abort","clearError","ModalOverlay","content","headerClass","onSubmit","e","preventDefault","contentClass","footerClass","Modal","in","mountOnEnter","unmountOnExit","timeout","classNames","logoutTimer","Avatar","src","alt","width","height","UserItem","id","process","image","name","placeCount","UsersList","items","length","map","user","key","places","Users","loadedUsers","setLoadedUsers","users","fetchUsers","Fragment","MainHeader","NavLinks","auth","useContext","SideDrawer","CSSTransition","handleSideDrawerClick","MainNavigation","isDrawerOpen","setIsDrawerOpen","closeSideDrawer","NewPlace","React","lazy","UserPlaces","UpdatePlace","Auth","App","routes","setToken","tokenExpirationDate","setTokenExpirationDate","setUserId","uid","expirationDate","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","removeItem","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem","useAuth","path","Provider","value","fallback","render"],"mappings":"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","file":"static/js/main.db935fbe.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = (props) => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nLoadingSpinner.propTypes = {\n  asOverlay: PropTypes.bool,\n};\n\nexport default LoadingSpinner;\n","import React from 'react';\nimport './Card.css';\n\nconst Card = (props) => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import { createContext } from 'react';\n\nexport const AuthContext = createContext({\n  isLoggedIn: false,\n  // we can manage userId here once a user is logged in\n  userId: null,\n  token: null, // not really need the initial value, but good for auto-completion\n  login: () => {},\n  logout: () => {},\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './Backdrop.css';\n\nconst Backdrop = (props) => {\n  return ReactDOM.createPortal(\n    <div\n      className={`backdrop ${props.className}`}\n      style={props.style}\n      onClick={props.handleClick}\n    ></div>,\n    document.getElementById('backdrop-hook')\n  );\n};\n\nexport default Backdrop;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport './Button.css';\n\n/**\n *\n * @param {{children, size?:string, inverse?:boolean, danger?:boolean, href?:string, to?:string, exact?:boolean, type?:string, disabled?:boolean, handleClick?: Function}} props\n */\nconst Button = (props) => {\n  // applying same styling for different kinds of buttons\n  const classes = `button button--${props.size || 'default'} ${\n    props.inverse && 'button--inverse'\n  } ${props.danger && 'button--danger'}`;\n\n  if (props.href) {\n    return (\n      <a className={classes} href={props.href}>\n        {props.children}\n      </a>\n    );\n  }\n  if (props.to) {\n    return (\n      <Link to={props.to} exact={props.exact} className={classes}>\n        {props.children}\n      </Link>\n    );\n  }\n  return (\n    <button\n      className={classes}\n      type={props.type}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  size: PropTypes.string,\n  inverse: PropTypes.bool,\n  danger: PropTypes.bool,\n  href: PropTypes.string,\n  to: PropTypes.string,\n  type: PropTypes.string,\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Modal from './Modal';\nimport Button from '../FormElements/Button';\n\nconst ErrorModal = (props) => {\n  return (\n    <Modal\n      onCancel={props.onClear}\n      header=\"An Error Occurred\"\n      show={!!props.error}\n      footer={<Button onClick={props.onClear}>Okay</Button>}\n    >\n      <p>{props.error}</p>\n    </Modal>\n  );\n};\n\nErrorModal.propTypes = {\n  onClear: PropTypes.func.isRequired,\n  error: PropTypes.string,\n};\n\nexport default ErrorModal;\n","import { useState, useCallback, useRef, useEffect } from 'react';\n\n/**\n * Returns functions and state for making request and handle error\n * @returns {{isLoading: boolean; error: Error; sendRequest: sendRequestCallback, clearError: () => void}}\n */\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  // can store data across render cycles\n  const activeHttpRequest = useRef([]);\n\n  // prevents creating new function when the component using this callback re-renders\n  //  ( effect using sendRequest sets state => rerender => new sendRequest => repeat )\n  /**\n   * @param {sendRequestCallback} cb - callback that handles request\n   */\n  const sendRequest = useCallback(async (\n    url,\n    method = 'GET',\n    body = null,\n    // header's default value should be an empty object\n    headers = {}\n  ) => {\n    setIsLoading(true);\n    const httpAbortController = new AbortController();\n    // we don't want to update UI when updating this data => useRef\n    activeHttpRequest.current.push(httpAbortController);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n        // link abort controller to this request so that we can cancel this request later\n        signal: httpAbortController.signal,\n      });\n      const responseData = await response.json();\n\n      // Remove abort controller associated with the request after we receive the response\n      activeHttpRequest.current = activeHttpRequest.current.filter(\n        (reqControl) => reqControl !== httpAbortController\n      );\n\n      if (!response.ok) {\n        throw new Error(responseData.message);\n      }\n      setIsLoading(false);\n\n      return responseData;\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n      // if error, we need to change the execution flow\n      throw err;\n    }\n  }, []);\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  /**\n   * @callback sendRequestCallback\n   * @param {string} url\n   * @param {string} [method=GET] 'GET' by default\n   * @param {Object} body request body\n   * @param {Object} [headers={}] request header. {} by default\n   * @returns {Object|undefined } responseData | undefined for error\n   */\n\n  useEffect(() => {\n    // this cleanup fn runs before the useEffect in next render runs\n    // or when the component unmounts\n    return () => {\n      /*\n      WARNING on activeHttpRequest.current\n      The ref value 'activeHttpRequest.current' will likely have changed \n      by the time this effect cleanup function runs. If this ref points \n      to a node rendered by React, copy 'activeHttpRequest.current' \n      to a variable inside the effect, and use that variable in \n      the cleanup function.    eslint(react-hooks/exhaustive-deps)\n      */\n      // We can ignore this warning because we do want to go through all the controllers\n      // we registered up to this point.\n      activeHttpRequest.current.forEach((abortController) =>\n        // cancel all ongoing request when this component unmounts\n        abortController.abort()\n      );\n    };\n  }, []);\n\n  return {\n    isLoading,\n    error,\n    sendRequest,\n    clearError,\n  };\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { CSSTransition } from 'react-transition-group';\n\nimport Backdrop from './Backdrop';\n\nimport './Modal.css';\n\nconst ModalOverlay = (props) => {\n  const content = (\n    <div className={`modal ${props.className}`} style={props.style}>\n      <header className={`modal__header ${props.headerClass}`}>\n        <h2>{props.header}</h2>\n      </header>\n      <form\n        onSubmit={\n          props.onSubmit\n            ? props.onSubmit\n            : (e) => {\n                e.preventDefault();\n              }\n        }\n      >\n        <div className={`modal__content ${props.contentClass}`}>\n          {props.children}\n        </div>\n        <footer className={`modal__footer ${props.footerClass}`}>\n          {props.footer}\n        </footer>\n      </form>\n    </div>\n  );\n  return ReactDOM.createPortal(content, document.getElementById('modal-hook'));\n};\n\nconst Modal = (props) => {\n  return (\n    <div className={`modal ${props.className}`} style={props.style}>\n      {props.show && <Backdrop handleClick={props.onCancel} />}\n      <CSSTransition\n        in={props.show}\n        mountOnEnter\n        unmountOnExit\n        timeout={200}\n        classNames=\"modal\"\n      >\n        <ModalOverlay {...props} />\n      </CSSTransition>\n    </div>\n  );\n};\n\nModal.propTypes = {\n  className: PropTypes.string,\n  style: PropTypes.string,\n  show: PropTypes.bool.isRequired,\n  onCancel: PropTypes.func.isRequired,\n  headerClass: PropTypes.string,\n  header: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  onSubmit: PropTypes.func,\n  contentClass: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.element])\n    .isRequired,\n  footer: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n};\n\nexport default Modal;\n","import { useState, useEffect, useCallback } from 'react';\n\n// timeout id\n// We want to keep this data after re-rendering the App component\nlet logoutTimer;\n\nexport const useAuth = () => {\n  const [token, setToken] = useState(null);\n  // store expiration date as state\n  const [tokenExpirationDate, setTokenExpirationDate] = useState();\n  const [userId, setUserId] = useState(null);\n\n  // useCallback to prevent infinite loop from consuming component that runs login function\n  // 1. consuming component runs login in effect\n  // 2. App's isLoggedIn local state changes\n  // 3. App re-renders => new login function created\n  // 4. consuming component runs login in effect\n  const login = useCallback((uid, token, expirationDate) => {\n    // store token and userId in state\n    setToken(token); // The server sends token in the responseData when authenticated\n    setUserId(uid);\n    // this is not the App state but the local variable\n    const tokenExpirationDate =\n      // token is set to expire in 1h on backend\n      // auto-logged in with useEffect(old expiration date) || logged in through the login form (new)\n      expirationDate || new Date(new Date().getTime() + 3600 * 1000);\n    // set expiration date in the state\n    // triggers logout timer in useEffect\n    setTokenExpirationDate(tokenExpirationDate);\n\n    localStorage.setItem(\n      'userData',\n      JSON.stringify({\n        userId: uid,\n        token: token,\n        // overwrite expiration with currently set expiration\n        // toISOString() - ensure that no date info is lost when stringified\n        expiration: tokenExpirationDate.toISOString(),\n      })\n    );\n  }, []);\n\n  const logout = useCallback(() => {\n    // clear token & userId from state\n    setToken(null);\n    setUserId(null);\n    // clear expirationDate\n    // manual login updates tokenExpirationDate with existing state\n    // and auto-logout will run with negative remaining time\n    setTokenExpirationDate(null);\n    // clear userData from localStorage - Ensure that users stay logged out after page reload\n    localStorage.removeItem('userData');\n  }, []);\n\n  // Auto-logout effect\n  // When tokenExpirationDate is updated inside login() through auto-login | login form,\n  // logout after remaining time if token and tokenExpirationDate exist.\n  useEffect(() => {\n    if (token && tokenExpirationDate) {\n      // we need to set the duration of timeout\n      const remainingTime =\n        tokenExpirationDate.getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      // If token or tokenExpirationDate don't exist, clear timeout.\n      clearTimeout(logoutTimer);\n    }\n  }, [token, logout, tokenExpirationDate]);\n\n  // Auto-login effect\n  // This will run when App component is mounted (initial load & page reload)\n  useEffect(() => {\n    // storedDate.expiration is stringified.\n    const storedData = JSON.parse(localStorage.getItem('userData'));\n\n    if (\n      storedData && // If 'userData' exists in localStorage (= logged in )\n      storedData.token && // if token is still available\n      new Date() < new Date(storedData.expiration) // check for expiration\n    ) {\n      login(\n        storedData.userId,\n        storedData.token,\n        // login with previously set expiration\n        new Date(storedData.expiration)\n      );\n    }\n  }, [login]); // login never changes (useCallback) => only runs on mount\n\n  return { userId, token, login, logout };\n};\n","import React from 'react';\nimport './Avatar.css';\n\nconst Avatar = (props) => {\n  return (\n    <div className={`avatar ${props.className}`} style={props.style}>\n      <img\n        src={props.src}\n        alt={props.alt}\n        style={{ width: props.width, height: props.width }}\n      />\n    </div>\n  );\n};\n\nexport default Avatar;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Avatar from '../../shared/components/UIElements/Avatar';\nimport Card from '../../shared/components/UIElements/Card';\nimport './UserItem.css';\n\nconst UserItem = (props) => {\n  return (\n    <li className=\"user-item\">\n      <Card className=\"user-item__content\">\n        <Link to={`/${props.id}/places`}>\n          <div className=\"user-item__image\">\n            <Avatar\n              src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`}\n              alt={props.name}\n            />\n          </div>\n          <div className=\"user-item__info\">\n            <h2>{props.name}</h2>\n            <h3>\n              {props.placeCount} {props.placeCount === 1 ? 'Place' : 'Places'}\n            </h3>\n          </div>\n        </Link>\n      </Card>\n    </li>\n  );\n};\n\nexport default UserItem;\n","import React from 'react';\nimport './UsersList.css';\nimport UserItem from './UserItem';\nimport Card from '../../shared/components/UIElements/Card';\n\nconst UsersList = (props) => {\n  if (props.items.length === 0) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>No user found.</h2>\n        </Card>\n      </div>\n    );\n  }\n  return (\n    <ul className=\"users-list\">\n      {props.items.map((user) => (\n        <UserItem\n          key={user.id}\n          id={user.id}\n          image={user.image}\n          name={user.name}\n          placeCount={user.places.length}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default UsersList;\n","import React, { useEffect, useState } from 'react';\n\nimport UsersList from '../components/UsersList';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\nconst Users = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedUsers, setLoadedUsers] = useState();\n  useEffect(() => {\n    // change duplicated function name\n    const fetchUsers = async () => {\n      try {\n        // Only need to pass url for GET request\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users`\n        );\n\n        setLoadedUsers(responseData.users);\n      } catch (err) {}\n    };\n    fetchUsers();\n    // sendRequest is wrapped inside useCallback\n    // so it will NOT trigger re-render when this components re-renders\n  }, [sendRequest]);\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && loadedUsers && <UsersList items={loadedUsers} />}\n    </React.Fragment>\n  );\n};\n\nexport default Users;\n","import React from 'react';\nimport './MainHeader.css';\n\nconst MainHeader = (props) => {\n  return (\n    <header className={`main-header ${props.className}`} style={props.style}>\n      {props.children}\n    </header>\n  );\n};\n\nexport default MainHeader;\n","import React, { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport { AuthContext } from '../../context/auth-context';\nimport './NavLinks.css';\n\nconst NavLinks = (props) => {\n  const auth = useContext(AuthContext);\n\n  return (\n    <ul className={`nav-links ${props.className}`} style={props.style}>\n      <li>\n        <NavLink to=\"/\" exact>\n          ALL USERS\n        </NavLink>\n      </li>\n      {auth.isLoggedIn && (\n        <li>\n          <NavLink to={`/${auth.userId}/places`}>MY PLACE</NavLink>\n        </li>\n      )}\n      {auth.isLoggedIn && (\n        <li>\n          <NavLink to=\"/places/new\">ADD PLACE</NavLink>\n        </li>\n      )}\n      {!auth.isLoggedIn && (\n        <li>\n          <NavLink to=\"/auth\">AUTHENTICATE</NavLink>\n        </li>\n      )}\n      {auth.isLoggedIn && (\n        <li>\n          {/* logout is semantically not a link but a button to initiate an action */}\n          <button onClick={auth.logout}>LOGOUT</button>\n        </li>\n      )}\n    </ul>\n  );\n};\n\nexport default NavLinks;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CSSTransition } from 'react-transition-group';\nimport './SideDrawer.css';\n\nconst SideDrawer = (props) => {\n  const content = (\n    <CSSTransition\n      in={props.show}\n      timeout={200}\n      classNames=\"slide-in-left\"\n      mountOnEnter\n      unmountOnExit\n    >\n      <aside\n        className={`side-drawer ${props.className}`}\n        style={props.style}\n        onClick={props.handleSideDrawerClick}\n      >\n        {props.children}\n      </aside>\n    </CSSTransition>\n  );\n  // Semantically, side-drawer should be a sibling to our App instead of its child\n  // because side-draw can be on top of the entire App components\n  // 'content' is still part of the Virtual DOM tree, but is rendered at some place else.\n  return ReactDOM.createPortal(content, document.getElementById('drawer-hook'));\n};\n\nexport default SideDrawer;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport MainHeader from './MainHeader';\nimport NavLinks from './NavLinks';\nimport Backdrop from '../UIElements/Backdrop';\nimport SideDrawer from './SideDrawer';\nimport './MainNavigation.css';\n\nconst MainNavigation = (props) => {\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n\n  // this is used to handle event generated within this component\n  const handleMenuButtonClick = () => {\n    setIsDrawerOpen(true);\n  };\n  // this is passed down to children components\n  const closeSideDrawer = () => {\n    setIsDrawerOpen(false);\n  };\n\n  return (\n    <React.Fragment>\n      {isDrawerOpen && <Backdrop handleClick={closeSideDrawer} />}\n      <SideDrawer show={isDrawerOpen} handleSideDrawerClick={closeSideDrawer}>\n        <nav className=\"main-navigation__drawer-nav\">\n          <NavLinks />\n        </nav>\n      </SideDrawer>\n      <MainHeader\n        className={`main-navigation ${props.className}`}\n        style={props.style}\n      >\n        <button\n          className=\"main-navigation__menu-btn\"\n          onClick={handleMenuButtonClick}\n        >\n          <span />\n          <span />\n          <span />\n        </button>\n        <h1 className=\"main-navigation__title\">\n          <Link to=\"/\">MyPlace</Link>\n        </h1>\n        <nav className=\"main-navigation__header-nav\">\n          <NavLinks />\n        </nav>\n      </MainHeader>\n    </React.Fragment>\n  );\n};\n\nexport default MainNavigation;\n","import React, { Suspense } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\nimport Users from './user/pages/Users';\n// import NewPlace from './places/pages/NewPlace';\n// import UserPlaces from './places/pages/UserPlaces';\n// import UpdatePlace from './places/pages/UpdatePlace';\n// import Auth from './user/pages/Auth';\nimport MainNavigation from './shared/components/Navigation/MainNavigation';\nimport { AuthContext } from './shared/context/auth-context';\nimport { useAuth } from './shared/hooks/auth-hook';\nimport LoadingSpinner from 'shared/components/UIElements/LoadingSpinner';\n\n// Just change how we import the User component to dynamically import it on demand\n// We're not lazy loading Users because it is the main page.\n// We only use lazy loading in app.js to split codes in meaningful chunks between pages\nconst NewPlace = React.lazy(() => import('./places/pages/NewPlace'));\nconst UserPlaces = React.lazy(() => import('./places/pages/UserPlaces'));\nconst UpdatePlace = React.lazy(() => import('./places/pages/UpdatePlace'));\nconst Auth = React.lazy(() => import('./user/pages/Auth'));\n\nconst App = () => {\n  const { userId, token, login, logout } = useAuth();\n\n  let routes;\n\n  if (token) {\n    // you have to nest each set of routes inside Switch\n    // if you use Fragment to wrap routes here and then pass it into the Switch,\n    // Switch does not work (bug?)\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/places/new\" exact>\n          <NewPlace />\n        </Route>\n        {/* path with params must come after paths that share the same path name*/}\n        <Route path=\"/places/:placeId\">\n          <UpdatePlace />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/auth\">\n          <Auth />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn: !!token, // quick convenience property to check login state\n        token, // we'll need this token when making request to certain routes\n        userId: userId,\n        login: login,\n        logout: logout,\n      }}\n    >\n      <Router>\n        <MainNavigation />\n        <main>\n          {/* The lazy components should be rendered inside a Suspense component */}\n          <Suspense\n            fallback={\n              <div className=\"center\">\n                <LoadingSpinner />\n              </div>\n            }\n          >\n            {routes}\n          </Suspense>\n        </main>\n      </Router>\n    </AuthContext.Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}