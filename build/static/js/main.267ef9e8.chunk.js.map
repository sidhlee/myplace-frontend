{"version":3,"sources":["shared/hooks/auth-hook.js","shared/components/UIElements/Avatar.js","shared/components/UIElements/Card.js","user/components/UserItem.js","user/components/UsersList.js","shared/components/UIElements/Backdrop.js","shared/components/UIElements/Modal.js","shared/components/FormElements/Button.js","shared/components/UIElements/ErrorModal.js","shared/components/UIElements/LoadingSpinner.js","shared/hooks/http-hook.js","user/pages/Users.js","shared/util/validators.js","shared/components/FormElements/Input.js","shared/components/FormElements/ImageUpload.js","shared/hooks/form-hook.js","shared/context/auth-context.js","places/pages/NewPlace.js","shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js","places/pages/UpdatePlace.js","user/pages/Auth.js","shared/components/Navigation/MainHeader.js","shared/components/Navigation/NavLinks.js","shared/components/Navigation/SideDrawer.js","shared/components/Navigation/MainNavigation.js","App.js","index.js"],"names":["logoutTimer","Avatar","props","className","style","src","alt","width","height","Card","children","UserItem","to","id","process","image","name","placeCount","UsersList","items","length","map","user","key","places","Backdrop","ReactDOM","createPortal","onClick","handleClick","document","getElementById","ModalOverlay","content","headerClass","header","onSubmit","e","preventDefault","contentClass","footerClass","footer","Modal","show","onCancel","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","Button","classes","size","inverse","danger","href","exact","type","disabled","ErrorModal","onClear","error","LoadingSpinner","asOverlay","useHttpClient","useState","isLoading","setIsLoading","setError","activeHttpRequest","useRef","sendRequest","useCallback","url","a","method","body","headers","httpAbortController","AbortController","current","push","fetch","signal","response","json","responseData","filter","reqControl","ok","Error","message","useEffect","forEach","abortController","abort","clearError","Users","loadedUsers","setLoadedUsers","users","fetchUsers","Fragment","VALIDATOR_MINLENGTH","val","validate","value","validators","isValid","validator","trim","test","inputReducer","state","action","isTouched","Input","useReducer","initialValue","initialIsValid","inputState","dispatch","inputChangeCallback","handleChange","target","handleBlur","element","placeholder","onChange","onBlur","rows","htmlFor","label","errorText","ImageUpload","file","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","fileReader","FileReader","onload","result","readAsDataURL","ref","display","accept","pickedFile","fileIsValid","files","onInput","center","click","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","inputData","formValidity","FormIsValid","AuthContext","createContext","isLoggedIn","userId","token","login","logout","NewPlace","auth","useContext","history","useHistory","title","description","address","handlePlaceSubmit","formData","FormData","append","Authorization","console","log","Map","mapRef","window","google","maps","zoom","Marker","position","PlaceItem","isMapShowing","setMapShowing","isConfirmModalShowing","setConfirmModalShowing","closeMap","cancelDelete","confirmDelete","onDelete","coordinates","creatorId","PlaceList","place","creator","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","fetchPlaces","deletedPlaceId","prevPlaces","UpdatePlace","loadedPlace","setLoadedPlace","placeId","setFormDataCallback","fetchPlace","handleUpdateSubmit","JSON","stringify","Auth","isLoginMode","setIsLoginMode","email","password","handleAuthSubmit","isLoginFormValid","undefined","prevMode","MainHeader","NavLinks","SideDrawer","handleSideDrawerClick","MainNavigation","isDrawerOpen","setIsDrawerOpen","closeSideDrawer","App","routes","setToken","tokenExpirationDate","setTokenExpirationDate","setUserId","uid","expirationDate","Date","getTime","localStorage","setItem","expiration","toISOString","removeItem","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem","useAuth","path","Provider","render"],"mappings":"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","file":"static/js/main.267ef9e8.chunk.js","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\n// timeout id\n// We want to keep this data after re-rendering the App component\nlet logoutTimer;\n\nexport const useAuth = () => {\n  const [token, setToken] = useState(null);\n  // store expiration date as state\n  const [tokenExpirationDate, setTokenExpirationDate] = useState();\n  const [userId, setUserId] = useState(null);\n\n  // useCallback to prevent infinite loop from consuming component that runs login function\n  // 1. consuming component runs login in effect\n  // 2. App's isLoggedIn local state changes\n  // 3. App re-renders => new login function created\n  // 4. consuming component runs login in effect\n  const login = useCallback((uid, token, expirationDate) => {\n    // store token and userId in state\n    setToken(token); // The server sends token in the responseData when authenticated\n    setUserId(uid);\n    // this is not the App state but the local variable\n    const tokenExpirationDate =\n      // token is set to expire in 1h on backend\n      // auto-logged in with useEffect(old expiration date) || logged in through the login form (new)\n      expirationDate || new Date(new Date().getTime() + 3600 * 1000);\n    // set expiration date in the state\n    // triggers logout timer in useEffect\n    setTokenExpirationDate(tokenExpirationDate);\n\n    localStorage.setItem(\n      'userData',\n      JSON.stringify({\n        userId: uid,\n        token: token,\n        // overwrite expiration with currently set expiration\n        // toISOString() - ensure that no date info is lost when stringified\n        expiration: tokenExpirationDate.toISOString(),\n      })\n    );\n  }, []);\n\n  const logout = useCallback(() => {\n    // clear token & userId from state\n    setToken(null);\n    setUserId(null);\n    // clear expirationDate\n    // manual login updates tokenExpirationDate with existing state\n    // and auto-logout will run with negative remaining time\n    setTokenExpirationDate(null);\n    // clear userData from localStorage - Ensure that users stay logged out after page reload\n    localStorage.removeItem('userData');\n  }, []);\n\n  // Auto-logout effect\n  // When tokenExpirationDate is updated inside login() through auto-login | login form,\n  // logout after remaining time if token and tokenExpirationDate exist.\n  useEffect(() => {\n    if (token && tokenExpirationDate) {\n      // we need to set the duration of timeout\n      const remainingTime =\n        tokenExpirationDate.getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      // If token or tokenExpirationDate don't exist, clear timeout.\n      clearTimeout(logoutTimer);\n    }\n  }, [token, logout, tokenExpirationDate]);\n\n  // Auto-login effect\n  // This will run when App component is mounted (initial load & page reload)\n  useEffect(() => {\n    // storedDate.expiration is stringified.\n    const storedData = JSON.parse(localStorage.getItem('userData'));\n\n    if (\n      storedData && // If 'userData' exists in localStorage (= logged in )\n      storedData.token && // if token is still available\n      new Date() < new Date(storedData.expiration) // check for expiration\n    ) {\n      login(\n        storedData.userId,\n        storedData.token,\n        // login with previously set expiration\n        new Date(storedData.expiration)\n      );\n    }\n  }, [login]); // login never changes (useCallback) => only runs on mount\n\n  return { userId, token, login, logout };\n};\n","import React from 'react';\nimport './Avatar.css';\n\nconst Avatar = (props) => {\n  return (\n    <div className={`avatar ${props.className}`} style={props.style}>\n      <img\n        src={props.src}\n        alt={props.alt}\n        style={{ width: props.width, height: props.width }}\n      />\n    </div>\n  );\n};\n\nexport default Avatar;\n","import React from 'react';\nimport './Card.css';\n\nconst Card = (props) => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Avatar from '../../shared/components/UIElements/Avatar';\nimport Card from '../../shared/components/UIElements/Card';\nimport './UserItem.css';\n\nconst UserItem = (props) => {\n  return (\n    <li className=\"user-item\">\n      <Card className=\"user-item__content\">\n        <Link to={`/${props.id}/places`}>\n          <div className=\"user-item__image\">\n            <Avatar\n              src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`}\n              alt={props.name}\n            />\n          </div>\n          <div className=\"user-item__info\">\n            <h2>{props.name}</h2>\n            <h3>\n              {props.placeCount} {props.placeCount === 1 ? 'Place' : 'Places'}\n            </h3>\n          </div>\n        </Link>\n      </Card>\n    </li>\n  );\n};\n\nexport default UserItem;\n","import React from 'react';\nimport './UsersList.css';\nimport UserItem from './UserItem';\nimport Card from '../../shared/components/UIElements/Card';\n\nconst UsersList = (props) => {\n  if (props.items.length === 0) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>No user found.</h2>\n        </Card>\n      </div>\n    );\n  }\n  return (\n    <ul className=\"users-list\">\n      {props.items.map((user) => (\n        <UserItem\n          key={user.id}\n          id={user.id}\n          image={user.image}\n          name={user.name}\n          placeCount={user.places.length}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default UsersList;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './Backdrop.css';\n\nconst Backdrop = (props) => {\n  return ReactDOM.createPortal(\n    <div\n      className={`backdrop ${props.className}`}\n      style={props.style}\n      onClick={props.handleClick}\n    ></div>,\n    document.getElementById('backdrop-hook')\n  );\n};\n\nexport default Backdrop;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { CSSTransition } from 'react-transition-group';\n\nimport Backdrop from './Backdrop';\n\nimport './Modal.css';\n\nconst ModalOverlay = (props) => {\n  const content = (\n    <div className={`modal ${props.className}`} style={props.style}>\n      <header className={`modal__header ${props.headerClass}`}>\n        <h2>{props.header}</h2>\n      </header>\n      <form\n        onSubmit={\n          props.onSubmit\n            ? props.onSubmit\n            : (e) => {\n                e.preventDefault();\n              }\n        }\n      >\n        <div className={`modal__content ${props.contentClass}`}>\n          {props.children}\n        </div>\n        <footer className={`modal__footer ${props.footerClass}`}>\n          {props.footer}\n        </footer>\n      </form>\n    </div>\n  );\n  return ReactDOM.createPortal(content, document.getElementById('modal-hook'));\n};\n\nconst Modal = (props) => {\n  return (\n    <div className={`modal ${props.className}`} style={props.style}>\n      {props.show && <Backdrop handleClick={props.onCancel} />}\n      <CSSTransition\n        in={props.show}\n        mountOnEnter\n        unmountOnExit\n        timeout={200}\n        classNames=\"modal\"\n      >\n        <ModalOverlay {...props} />\n      </CSSTransition>\n    </div>\n  );\n};\n\nModal.propTypes = {\n  className: PropTypes.string,\n  style: PropTypes.string,\n  show: PropTypes.bool.isRequired,\n  onCancel: PropTypes.func.isRequired,\n  headerClass: PropTypes.string,\n  header: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  onSubmit: PropTypes.func,\n  contentClass: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.element])\n    .isRequired,\n  footer: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n};\n\nexport default Modal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport './Button.css';\n\n/**\n *\n * @param {{children, size?:string, inverse?:boolean, danger?:boolean, href?:string, to?:string, exact?:boolean, type?:string, disabled?:boolean, handleClick?: Function}} props\n */\nconst Button = (props) => {\n  // applying same styling for different kinds of buttons\n  const classes = `button button--${props.size || 'default'} ${\n    props.inverse && 'button--inverse'\n  } ${props.danger && 'button--danger'}`;\n\n  if (props.href) {\n    return (\n      <a className={classes} href={props.href}>\n        {props.children}\n      </a>\n    );\n  }\n  if (props.to) {\n    return (\n      <Link to={props.to} exact={props.exact} className={classes}>\n        {props.children}\n      </Link>\n    );\n  }\n  return (\n    <button\n      className={classes}\n      type={props.type}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  size: PropTypes.string,\n  inverse: PropTypes.bool,\n  danger: PropTypes.bool,\n  href: PropTypes.string,\n  to: PropTypes.string,\n  type: PropTypes.string,\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Modal from './Modal';\nimport Button from '../FormElements/Button';\n\nconst ErrorModal = (props) => {\n  return (\n    <Modal\n      onCancel={props.onClear}\n      header=\"An Error Occurred\"\n      show={!!props.error}\n      footer={<Button onClick={props.onClear}>Okay</Button>}\n    >\n      <p>{props.error}</p>\n    </Modal>\n  );\n};\n\nErrorModal.propTypes = {\n  onClear: PropTypes.func.isRequired,\n  error: PropTypes.string,\n};\n\nexport default ErrorModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = (props) => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nLoadingSpinner.propTypes = {\n  asOverlay: PropTypes.bool,\n};\n\nexport default LoadingSpinner;\n","import { useState, useCallback, useRef, useEffect } from 'react';\n\n/**\n * Returns functions and state for making request and handle error\n * @returns {{isLoading: boolean; error: Error; sendRequest: sendRequestCallback, clearError: () => void}}\n */\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  // can store data across render cycles\n  const activeHttpRequest = useRef([]);\n\n  // prevents creating new function when the component using this callback re-renders\n  //  ( effect using sendRequest sets state => rerender => new sendRequest => repeat )\n  /**\n   * @param {sendRequestCallback} cb - callback that handles request\n   */\n  const sendRequest = useCallback(async (\n    url,\n    method = 'GET',\n    body = null,\n    // header's default value should be an empty object\n    headers = {}\n  ) => {\n    setIsLoading(true);\n    const httpAbortController = new AbortController();\n    // we don't want to update UI when updating this data => useRef\n    activeHttpRequest.current.push(httpAbortController);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n        // link abort controller to this request so that we can cancel this request later\n        signal: httpAbortController.signal,\n      });\n      const responseData = await response.json();\n\n      // Remove abort controller associated with the request after we receive the response\n      activeHttpRequest.current = activeHttpRequest.current.filter(\n        (reqControl) => reqControl !== httpAbortController\n      );\n\n      if (!response.ok) {\n        throw new Error(responseData.message);\n      }\n      setIsLoading(false);\n\n      return responseData;\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n      // if error, we need to change the execution flow\n      throw err;\n    }\n  }, []);\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  /**\n   * @callback sendRequestCallback\n   * @param {string} url\n   * @param {string} [method=GET] 'GET' by default\n   * @param {Object} body request body\n   * @param {Object} [headers={}] request header. {} by default\n   * @returns {Object|undefined } responseData | undefined for error\n   */\n\n  useEffect(() => {\n    // this cleanup fn runs before the useEffect in next render runs\n    // or when the component unmounts\n    return () => {\n      /*\n      WARNING on activeHttpRequest.current\n      The ref value 'activeHttpRequest.current' will likely have changed \n      by the time this effect cleanup function runs. If this ref points \n      to a node rendered by React, copy 'activeHttpRequest.current' \n      to a variable inside the effect, and use that variable in \n      the cleanup function.    eslint(react-hooks/exhaustive-deps)\n      */\n      // We can ignore this warning because we do want to go through all the controllers\n      // we registered up to this point.\n      activeHttpRequest.current.forEach((abortController) =>\n        // cancel all ongoing request when this component unmounts\n        abortController.abort()\n      );\n    };\n  }, []);\n\n  return {\n    isLoading,\n    error,\n    sendRequest,\n    clearError,\n  };\n};\n","import React, { useEffect, useState } from 'react';\n\nimport UsersList from '../components/UsersList';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\nconst Users = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedUsers, setLoadedUsers] = useState();\n  useEffect(() => {\n    // change duplicated function name\n    const fetchUsers = async () => {\n      try {\n        // Only need to pass url for GET request\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users`\n        );\n\n        setLoadedUsers(responseData.users);\n      } catch (err) {}\n    };\n    fetchUsers();\n    // sendRequest is wrapped inside useCallback\n    // so it will NOT trigger re-render when this components re-renders\n  }, [sendRequest]);\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && loadedUsers && <UsersList items={loadedUsers} />}\n    </React.Fragment>\n  );\n};\n\nexport default Users;\n","// constants\nconst VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = (val) => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val,\n});\nexport const VALIDATOR_MAXLENGTH = (val) => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val,\n});\nexport const VALIDATOR_MIN = (val) => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = (val) => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value); // \\S : non-space\n    }\n  }\n  return isValid;\n};\n","import React, { useReducer, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      };\n    case 'TOUCH':\n      return {\n        ...state,\n        isTouched: true,\n      };\n    default:\n      return state;\n  }\n};\n\n/**\n * @param {{id:string, element: string, type?:string label:string, inputChangeCallback: function, errorText:string, validators?: Array, placeholder?: string, rows?:number}} props\n */\nconst Input = (props) => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '', // initialize value if provided. If not, default to ''\n    isValid: props.initialIsValid || false,\n    isTouched: false,\n  });\n\n  // destructure props to pass specific prop to dep list\n  const { id, inputChangeCallback } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    inputChangeCallback(id, value, isValid);\n\n    // if we pass props here, this might cause infinite loop & render too often\n  }, [id, inputChangeCallback, value, isValid]);\n\n  const handleChange = (e) => {\n    dispatch({\n      type: 'CHANGE',\n      val: e.target.value,\n      validators: props.validators,\n    });\n  };\n  // only give warning when the input is blurred\n  // (not throwing error while user is typing)\n  const handleBlur = () => {\n    dispatch({ type: 'TOUCH' });\n  };\n\n  const element =\n    props.element === 'input' ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={inputState.value}\n      /> // fallback to 3\n    );\n\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouched && 'form-control--invalid'\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\n// Input takes id as required prop to reuse same change handler which will send back\n// the id , value and the validity of the input to update the form state in parent component\n//\n// Without id, it will be hard to know which Input component called the change handler\n\nInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  element: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  inputChangeCallback: PropTypes.func.isRequired,\n  errorText: PropTypes.string.isRequired,\n  validators: PropTypes.arrayOf(\n    PropTypes.shape({\n      type: PropTypes.string.isRequired,\n    })\n  ),\n  placeholder: PropTypes.string,\n  rows: PropTypes.number,\n};\n\nexport default Input;\n","import React, { useRef, useState, useEffect } from 'react';\n\nimport Button from './Button';\nimport './ImageUpload.css';\n\nconst ImageUpload = (props) => {\n  const [file, setFile] = useState(); // store binary file data\n  const [previewUrl, setPreviewUrl] = useState(); // store url to parsed data\n  const [isValid, setIsValid] = useState(false); // file validity\n\n  const filePickerRef = useRef();\n\n  // generates a preview\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    // Browser API\n    const fileReader = new FileReader();\n    // FileReader does not support Promise\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result); // parsed result is available at .result\n    };\n    // In order to render image, you need to pass the url to the data\n    fileReader.readAsDataURL(file);\n  }, [file]);\n\n  const pickedHandler = (e) => {\n    let pickedFile;\n    let fileIsValid = isValid;\n    // only handle when user picked one file\n    if (e.target.files && e.target.files.length === 1) {\n      // extract picked file available at e.target.files\n      pickedFile = e.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true); // will be set to true in the next render\n      fileIsValid = true; // set manually\n    } else {\n      // if user picked no file or more than 1 file\n      setIsValid(false); // will be set to false in the next render\n      fileIsValid = true;\n    }\n    // send up the picked file and validity to consume in the parent & other components\n    // send the manually-set validity to reflect the changes in this render (,not the state from next render)\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n\n  const pickImageHandler = () => {\n    // click on the hidden file input to open up the file picker\n    filePickerRef.current.click();\n  };\n\n  return (\n    <div className=\"form-control\">\n      {/* Hide default file picker by default */}\n      <input\n        id={props.id}\n        ref={filePickerRef}\n        style={{ display: 'none' }}\n        type=\"file\"\n        accept=\".jpb,.png,.jpeg\"\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && 'center'}`}>\n        <div className=\"image-upload__preview\">\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n          {!previewUrl && <p>Please pick an image</p>}\n        </div>\n        <Button type=\"button\" onClick={pickImageHandler}>\n          PICK IMAGE\n        </Button>\n      </div>\n      {!isValid && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","import { useCallback, useReducer } from 'react';\n\n// when any of input is changed, re-evaluate the validity of the entire form\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n      // for each input object in inputs object\n      for (const inputId in state.inputs) {\n        // if the given input is nullish (undefined), skip it\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        // if input's id matches dispatched action's id\n        if (inputId === action.inputId) {\n          // form becomes invalid if action.isValid is false\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          // if inputId doesn't match action.inputId,\n          // recalculate form's validity based on current state of the input\n          // TODO: why do we need this check?\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      };\n    case 'SET_DATA':\n      return {\n        // overwrite existing state\n        // so no spreading\n        inputs: action.inputs,\n        isValid: action.formIsValid,\n      };\n    default:\n      return state;\n  }\n};\n\n/**\n *\n * @param {Object} initialInputs initial structure and values of the input\n * @param {boolean} initialFormValidity\n * @returns {Array} [ formState, inputChangeCallback, setFormDataCallback ]\n */\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity,\n  });\n\n  // without useCallback, this function is created every time NewPlace is rendered\n  // then passed to Input component which will cause it to call this function in effect hook.\n  //\n  // this callback can be passed to different child components because it receives\n  // component id as argument\n  const inputChangeCallback = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      inputId: id,\n      value,\n      isValid,\n    });\n  }, []); // re-use this function when NewPlace re-renders\n\n  /**\n   * sets form data (for initial value)\n   */\n  const setFormDataCallback = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      FormIsValid: formValidity,\n    });\n  }, []);\n\n  return [formState, inputChangeCallback, setFormDataCallback];\n};\n","import { createContext } from 'react';\n\nexport const AuthContext = createContext({\n  isLoggedIn: false,\n  // we can manage userId here once a user is logged in\n  userId: null,\n  token: null, // not really need the initial value, but good for auto-completion\n  login: () => {},\n  logout: () => {},\n});\n","import React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './PlaceForm.css';\n\nconst NewPlace = () => {\n  const auth = useContext(AuthContext);\n  const history = useHistory();\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [formState, inputChangeCallback] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: false,\n      },\n      description: {\n        value: '',\n        isValid: false,\n      },\n      address: {\n        value: '',\n        isValid: false,\n      },\n      image: {\n        value: null,\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const handlePlaceSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const formData = new FormData();\n      formData.append('title', formState.inputs.title.value);\n      formData.append('description', formState.inputs.description.value);\n      formData.append('address', formState.inputs.address.value);\n      // We no longer need to send userId with formData\n      // because we are extracting it from the token\n      // formData.append('creator', auth.userId);\n      formData.append('image', formState.inputs.image.value);\n\n      // The server expects the following data\n      // const { title, description, address, creator } = req.body;\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/places`,\n        'POST',\n        formData,\n        { Authorization: `Bearer ${auth.token}` } // header\n      );\n      // A new place is created in the backend with transaction.\n      // In transaction, the collection must exist before you create a document in it.\n\n      // redirect user upon success\n      history.push('/');\n\n      // Redirect the user to a different page\n    } catch (err) {}\n    console.log(formState.inputs); // send this to the backend!\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <form className=\"place-form\" onSubmit={handlePlaceSubmit}>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <Input\n          id=\"title\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title\"\n          inputChangeCallback={inputChangeCallback}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          type=\"text\"\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(5)]} // this is superset of require\n          errorText=\"Please enter a valid description at least 5 characters\"\n          inputChangeCallback={inputChangeCallback}\n        />\n        <Input\n          id=\"address\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Address\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid address\"\n          inputChangeCallback={inputChangeCallback}\n        />\n        <ImageUpload\n          id=\"image\"\n          onInput={inputChangeCallback}\n          errorText=\"Please provide an image\"\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD PLACE\n        </Button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default NewPlace;\n","import React, { useRef, useEffect } from 'react';\n\nimport './Map.css';\n\nconst Map = (props) => {\n  const mapRef = useRef();\n\n  // Place async operations (fetching data) inside effect\n  useEffect(() => {\n    // google maps SDK: https://developers.google.com/maps/documentation/javascript/tutorial\n    // Render the map inside mapRef.current element.\n    const map = new window.google.maps.Map(mapRef.current, {\n      // center: {lat: -34.397, lng: 150.644},\n      center: props.center, // controlled from above this component\n      zoom: props.zoom,\n    });\n    // Create a new marker\n    new window.google.maps.Marker({\n      position: props.center, // at here\n      map: map, // on this map object\n    });\n  }, [props.center, props.zoom]);\n\n  return (\n    <div\n      ref={mapRef}\n      className={`map ${props.className}`}\n      style={props.style}\n    ></div>\n  );\n};\n\nexport default Map;\n","import React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '../../shared/components/UIElements/Card';\nimport Button from '../../shared/components/FormElements/Button';\nimport Modal from '../../shared/components/UIElements/Modal';\nimport Map from '../../shared/components/UIElements/Map';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport './PlaceItem.css';\nimport ErrorModal from 'shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from 'shared/components/UIElements/LoadingSpinner';\n\nconst PlaceItem = (props) => {\n  const { sendRequest, isLoading, error, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n  const [isMapShowing, setMapShowing] = useState(false);\n  const [isConfirmModalShowing, setConfirmModalShowing] = useState(false);\n\n  const openMap = () => setMapShowing(true);\n\n  const closeMap = () => setMapShowing(false);\n\n  const showDeleteWarning = () => setConfirmModalShowing(true);\n\n  const cancelDelete = () => setConfirmModalShowing(false);\n\n  const confirmDelete = async () => {\n    // You need to close the confirm modal before sending request so that\n    // when error modal opens up there won't be two modals opened up at the same time\n    setConfirmModalShowing(false);\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/places/${props.id}`,\n        'DELETE',\n        null,\n        {\n          Authorization: 'Bearer ' + auth.token,\n        }\n      );\n    } catch (err) {}\n    props.onDelete(props.id);\n    console.log('deleting...');\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {/* map modal */}\n      <Modal\n        show={isMapShowing}\n        onCancel={closeMap}\n        header={props.address}\n        contentClass=\"place-item__modal-content\"\n        footerClass=\"place-item__modal-actions\"\n        footer={<Button onClick={closeMap}>CLOSE</Button>}\n      >\n        <div className=\"map-container\">\n          <Map center={props.coordinates} zoom={16}></Map>\n        </div>\n      </Modal>\n      {/* delete confirmation modal */}\n      <Modal\n        show={isConfirmModalShowing}\n        onCancel={cancelDelete}\n        header=\"Are you sure?\"\n        footerClass=\"place-item__modal-actions\"\n        footer={\n          <>\n            <Button inverse onClick={cancelDelete}>\n              CANCEL\n            </Button>\n            <Button danger onClick={confirmDelete}>\n              DELETE\n            </Button>\n          </>\n        }\n      >\n        <p>\n          Do you want to proceed and delete this place? You CANNOT UNDO this\n          action.\n        </p>\n      </Modal>\n      {/* Main place card */}\n      <li className={`place-item ${props.className}`} style={props.style}>\n        <Card className=\"place-item__content\">\n          {/* Confirm modal is closed when clicked on either cancel/delete */}\n          {/* Therefore the spinner is going to be on the item that's being deleted */}\n          {isLoading && <LoadingSpinner asOverlay />}\n          <div className=\"place-item__image\">\n            <img\n              src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`}\n              alt={props.title}\n            />\n          </div>\n          <div className=\"place-item__info\">\n            <h2>{props.title}</h2>\n            <h3>{props.address}</h3>\n            <p>{props.description}</p>\n          </div>\n          <div className=\"place-item__actions\">\n            <Button inverse onClick={openMap}>\n              VIEW ON MAP\n            </Button>\n            {auth.userId === props.creatorId && (\n              <Button to={`/places/${props.id}`}>EDIT</Button>\n            )}\n            {auth.userId === props.creatorId && (\n              <Button danger onClick={showDeleteWarning}>\n                DELETE\n              </Button>\n            )}\n          </div>\n        </Card>\n      </li>\n    </React.Fragment>\n  );\n};\n\nPlaceItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  address: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  coordinates: PropTypes.shape({\n    lat: PropTypes.number.isRequired,\n    lng: PropTypes.number.isRequired,\n  }).isRequired,\n  // id of the user who created this place\n  creatorId: PropTypes.string.isRequired,\n  // id of this place item\n  id: PropTypes.string.isRequired,\n};\n\nexport default PlaceItem;\n","import React from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport PlaceItem from './PlaceItem';\nimport Button from '../../shared/components/FormElements/Button';\n\nimport './PlaceList.css';\n\nconst PlaceList = (props) => {\n  if (props.items.length === 0) {\n    return (\n      <div className=\"place-list center\">\n        <Card>\n          <h2>No places found. Create a new place!</h2>\n          <Button to=\"/places/new\">Create Place</Button>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <ul className={`place-list ${props.className}`} style={props.style}>\n      {props.items.map((place) => (\n        <PlaceItem\n          key={place.id}\n          id={place.id}\n          // We had different named field in backend\n          image={place.image}\n          title={place.title}\n          description={place.description}\n          address={place.address}\n          creatorId={place.creator}\n          coordinates={place.location}\n          onDelete={props.onDeletePlace}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default PlaceList;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useHttpClient } from 'shared/hooks/http-hook';\n\nimport PlaceList from '../components/PlaceList';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\n\nconst UserPlaces = (props) => {\n  const [loadedPlaces, setLoadedPlaces] = useState([]);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const userId = useParams().userId;\n\n  useEffect(() => {\n    const fetchPlaces = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`\n        );\n\n        /*\n          The backend sends this response:\n          return res.json({\n            places: userWithPlaces.places.map((place) =>\n            place.toObject({ getters: true })\n            ),\n          });\n        */\n        setLoadedPlaces(responseData.places);\n      } catch (err) {}\n    };\n    fetchPlaces();\n    // userId won't change as long as we're on the same page with the same logged in user\n  }, [sendRequest, userId]);\n\n  /**\n   * Update UI when place is deleted\n   * @param {string} deletedPlaceId\n   */\n  const handlePlaceDelete = (deletedPlaceId) => {\n    setLoadedPlaces((prevPlaces) =>\n      prevPlaces.filter((place) => place.id !== deletedPlaceId)\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner asOverlay />\n        </div>\n      )}\n      {!isLoading && loadedPlaces && (\n        <PlaceList items={loadedPlaces} onDeletePlace={handlePlaceDelete} />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UserPlaces;\n","import React, { useEffect, useState, useContext } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport { useForm } from '../../shared/hooks/form-hook';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n} from '../../shared/util/validators';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './PlaceForm.css';\nimport LoadingSpinner from 'shared/components/UIElements/LoadingSpinner';\nimport ErrorModal from 'shared/components/UIElements/ErrorModal';\n\n// import './UpdatePlace.css';\n\nconst UpdatePlace = (props) => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedPlace, setLoadedPlace] = useState();\n\n  const placeId = useParams().placeId;\n  const history = useHistory();\n\n  const [formState, inputChangeCallback, setFormDataCallback] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: false,\n      },\n      description: {\n        value: '',\n        isValid: false,\n      },\n    },\n    true // initially true (validated before)\n  );\n\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`\n        );\n        setLoadedPlace(responseData.place);\n        setFormDataCallback({\n          title: {\n            value: responseData.place.title,\n            isValid: true,\n          },\n          description: {\n            value: responseData.place.description,\n            isValid: true,\n          },\n        });\n      } catch (err) {}\n    };\n    fetchPlace();\n  }, [sendRequest, placeId, setFormDataCallback]);\n\n  const handleUpdateSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\n        'PATCH',\n        // You must stringify request body!!!\n        JSON.stringify({\n          title: formState.inputs.title.value,\n          description: formState.inputs.description.value,\n        }),\n        {\n          // need to set Content-Type for body-parser on backend\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + auth.token,\n        }\n      );\n      // we want to redirect users to the user's places page\n      // for that, we need to get userId from the context\n      history.push(`/${auth.userId}/places`);\n    } catch (err) {}\n    console.log(formState.inputs);\n  };\n  if (isLoading) {\n    return (\n      <div className=\"center\">\n        <LoadingSpinner asOverlay />\n      </div>\n    );\n  }\n\n  if (!loadedPlace && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Cannot find the place</h2>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {/* Prevent useReducer from running after the form and rendered and therefore, overriding initial values with empty strings */}\n      {/* We want this to be rendered AFTER formState is initialized */}\n      {!isLoading && loadedPlace && (\n        <form className={`place-form`} onSubmit={handleUpdateSubmit}>\n          <Input\n            id=\"title\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Title\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter a valid title.\"\n            inputChangeCallback={inputChangeCallback}\n            // initialize value with the data from backend\n            initialValue={loadedPlace.title}\n            initialIsValid={true}\n          />\n          <Input\n            id=\"description\"\n            element=\"textarea\"\n            label=\"Description\"\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText=\"Please enter a valid description (min. 5 characters).\"\n            inputChangeCallback={inputChangeCallback}\n            initialValue={loadedPlace.description}\n            initialIsValid={true}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            UPDATE PLACE\n          </Button>\n        </form>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UpdatePlace;\n","import React, { useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\n\nimport './Auth.css';\n\nconst Auth = (props) => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputChangeCallback, setFormDataCallback] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false,\n      },\n      password: {\n        value: '',\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const handleAuthSubmit = async (e) => {\n    e.preventDefault();\n\n    console.log(formState.inputs);\n\n    if (isLoginMode) {\n      try {\n        // let's get the userId from the login/ signup responseData\n        // React will immediately update the UI before sending request since we're inside async function\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users/login`,\n          'POST',\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value,\n          }),\n          { 'Content-Type': 'application/json' }\n        );\n\n        // server sends this response:\n        // return res.status(201).json({ user: createdUser.toObject({ getters: true }) });\n        // pass id info so that we can update userId in context\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {\n        console.log(err);\n        // error is already handled inside useHttpClient hook\n        // we just need catch to break out of the hook\n      }\n    } else {\n      try {\n        // FormData: Browser API for creating a form data that can be attached to the request\n        const formData = new FormData();\n        // You can add text or binary data to formData\n        formData.append('name', formState.inputs.name.value);\n        formData.append('email', formState.inputs.email.value);\n        formData.append('password', formState.inputs.password.value);\n        formData.append('image', formState.inputs.image.value);\n\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users/signup`,\n          'POST',\n          formData\n          // fetch API automatically adds appropriate headers when given a formData\n        );\n        // only continue to here if we don't have error\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {\n        // we're just catching the error thrown at the useHttpClient hook\n        // which already handled error and throws to change execution flow\n        console.log(err);\n      }\n    }\n  };\n\n  const switchMode = () => {\n    // need to reset form data when we switch mode because we're adding /removing\n    // name input based on isLoginMode state\n    // we need to also add/remove name input in formState\n    // to be aligned with the newly rendered form\n\n    // if we're in signup mode & switching to login mode\n    if (!isLoginMode) {\n      const isLoginFormValid =\n        formState.inputs.email.isValid && formState.inputs.password.isValid;\n      setFormDataCallback(\n        {\n          ...formState.inputs,\n          name: undefined, // drop the name field from signup mode\n          image: undefined,\n        },\n        isLoginFormValid\n      );\n    } // switching to signup mode\n    else {\n      setFormDataCallback(\n        {\n          ...formState.inputs,\n          // add name field\n          name: {\n            value: '',\n            isValid: false,\n          },\n          image: {\n            value: null,\n            isValid: false,\n          },\n        },\n        false // always false since we're adding a new input(name)\n      );\n    }\n    setIsLoginMode((prevMode) => !prevMode);\n    // if you have multiple setState in the same synchronous code block,\n    // React will batch them together in one render cycle to prevent unnecessary re-renders\n  };\n  // replace handleError with clearError returned from useHttpClient\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2 className=\"authentication__header\">Login Required</h2>\n        <hr />\n        <form className={`authentication__form`} onSubmit={handleAuthSubmit}>\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Your Name\"\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please enter a name\"\n              inputChangeCallback={inputChangeCallback}\n            />\n          )}\n          {!isLoginMode && (\n            // Add ImageUpload component only in signup mode\n            // and pass inputChangeCallback to store image(binary data) value in local state\n            // and validate the form on image input change\n            <ImageUpload\n              id=\"image\"\n              center\n              onInput={inputChangeCallback}\n              errorText=\"Please provide an image.\"\n            />\n          )}\n          <Input\n            element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            label=\"Email\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address\"\n            inputChangeCallback={inputChangeCallback}\n          />\n          <Input\n            element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid email address\"\n            inputChangeCallback={inputChangeCallback}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n          </Button>\n        </form>\n        <Button inverse onClick={switchMode}>\n          SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n        </Button>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Auth;\n","import React from 'react';\nimport './MainHeader.css';\n\nconst MainHeader = (props) => {\n  return (\n    <header className={`main-header ${props.className}`} style={props.style}>\n      {props.children}\n    </header>\n  );\n};\n\nexport default MainHeader;\n","import React, { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport { AuthContext } from '../../context/auth-context';\nimport './NavLinks.css';\n\nconst NavLinks = (props) => {\n  const auth = useContext(AuthContext);\n\n  return (\n    <ul className={`nav-links ${props.className}`} style={props.style}>\n      <li>\n        <NavLink to=\"/\" exact>\n          ALL USERS\n        </NavLink>\n      </li>\n      {auth.isLoggedIn && (\n        <li>\n          <NavLink to={`/${auth.userId}/places`}>MY PLACE</NavLink>\n        </li>\n      )}\n      {auth.isLoggedIn && (\n        <li>\n          <NavLink to=\"/places/new\">ADD PLACE</NavLink>\n        </li>\n      )}\n      {!auth.isLoggedIn && (\n        <li>\n          <NavLink to=\"/auth\">AUTHENTICATE</NavLink>\n        </li>\n      )}\n      {auth.isLoggedIn && (\n        <li>\n          {/* logout is semantically not a link but a button to initiate an action */}\n          <button onClick={auth.logout}>LOGOUT</button>\n        </li>\n      )}\n    </ul>\n  );\n};\n\nexport default NavLinks;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CSSTransition } from 'react-transition-group';\nimport './SideDrawer.css';\n\nconst SideDrawer = (props) => {\n  const content = (\n    <CSSTransition\n      in={props.show}\n      timeout={200}\n      classNames=\"slide-in-left\"\n      mountOnEnter\n      unmountOnExit\n    >\n      <aside\n        className={`side-drawer ${props.className}`}\n        style={props.style}\n        onClick={props.handleSideDrawerClick}\n      >\n        {props.children}\n      </aside>\n    </CSSTransition>\n  );\n  // Semantically, side-drawer should be a sibling to our App instead of its child\n  // because side-draw can be on top of the entire App components\n  // 'content' is still part of the Virtual DOM tree, but is rendered at some place else.\n  return ReactDOM.createPortal(content, document.getElementById('drawer-hook'));\n};\n\nexport default SideDrawer;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport MainHeader from './MainHeader';\nimport NavLinks from './NavLinks';\nimport Backdrop from '../UIElements/Backdrop';\nimport SideDrawer from './SideDrawer';\nimport './MainNavigation.css';\n\nconst MainNavigation = (props) => {\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n\n  // this is used to handle event generated within this component\n  const handleMenuButtonClick = () => {\n    setIsDrawerOpen(true);\n  };\n  // this is passed down to children components\n  const closeSideDrawer = () => {\n    setIsDrawerOpen(false);\n  };\n\n  return (\n    <React.Fragment>\n      {isDrawerOpen && <Backdrop handleClick={closeSideDrawer} />}\n      <SideDrawer show={isDrawerOpen} handleSideDrawerClick={closeSideDrawer}>\n        <nav className=\"main-navigation__drawer-nav\">\n          <NavLinks />\n        </nav>\n      </SideDrawer>\n      <MainHeader\n        className={`main-navigation ${props.className}`}\n        style={props.style}\n      >\n        <button\n          className=\"main-navigation__menu-btn\"\n          onClick={handleMenuButtonClick}\n        >\n          <span />\n          <span />\n          <span />\n        </button>\n        <h1 className=\"main-navigation__title\">\n          <Link to=\"/\">MyPlace</Link>\n        </h1>\n        <nav className=\"main-navigation__header-nav\">\n          <NavLinks />\n        </nav>\n      </MainHeader>\n    </React.Fragment>\n  );\n};\n\nexport default MainNavigation;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\nimport Users from './user/pages/Users';\nimport NewPlace from './places/pages/NewPlace';\nimport UserPlaces from './places/pages/UserPlaces';\nimport UpdatePlace from './places/pages/UpdatePlace';\nimport Auth from './user/pages/Auth';\nimport MainNavigation from './shared/components/Navigation/MainNavigation';\nimport { AuthContext } from './shared/context/auth-context';\nimport { useAuth } from './shared/hooks/auth-hook';\n\nconst App = () => {\n  const { userId, token, login, logout } = useAuth();\n\n  let routes;\n\n  if (token) {\n    // you have to nest each set of routes inside Switch\n    // if you use Fragment to wrap routes here and then pass it into the Switch,\n    // Switch does not work (bug?)\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/places/new\" exact>\n          <NewPlace />\n        </Route>\n        {/* path with params must come after paths that share the same path name*/}\n        <Route path=\"/places/:placeId\">\n          <UpdatePlace />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/auth\">\n          <Auth />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn: !!token, // quick convenience property to check login state\n        token, // we'll need this token when making request to certain routes\n        userId: userId,\n        login: login,\n        logout: logout,\n      }}\n    >\n      <Router>\n        <MainNavigation />\n        <main>{routes}</main>\n      </Router>\n    </AuthContext.Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}