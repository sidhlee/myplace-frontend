{"version":3,"sources":["shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Map","props","mapRef","useRef","useEffect","map","window","google","maps","current","center","zoom","Marker","position","ref","className","style","PlaceItem","useHttpClient","sendRequest","isLoading","error","clearError","auth","useContext","AuthContext","useState","isMapShowing","setMapShowing","isConfirmModalShowing","setConfirmModalShowing","closeMap","cancelDelete","confirmDelete","a","process","id","Authorization","token","onDelete","console","log","Fragment","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","coordinates","inverse","danger","Card","LoadingSpinner","asOverlay","src","image","alt","title","description","userId","creatorId","to","PlaceList","items","length","place","key","creator","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","responseData","places","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"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","file":"static/js/6.f78fc58c.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nimport './Map.css';\n\nconst Map = (props) => {\n  const mapRef = useRef();\n\n  // Place async operations (fetching data) inside effect\n  useEffect(() => {\n    // google maps SDK: https://developers.google.com/maps/documentation/javascript/tutorial\n    // Render the map inside mapRef.current element.\n    const map = new window.google.maps.Map(mapRef.current, {\n      // center: {lat: -34.397, lng: 150.644},\n      center: props.center, // controlled from above this component\n      zoom: props.zoom,\n    });\n    // Create a new marker\n    new window.google.maps.Marker({\n      position: props.center, // at here\n      map: map, // on this map object\n    });\n  }, [props.center, props.zoom]);\n\n  return (\n    <div\n      ref={mapRef}\n      className={`map ${props.className}`}\n      style={props.style}\n    ></div>\n  );\n};\n\nexport default Map;\n","import React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '../../shared/components/UIElements/Card';\nimport Button from '../../shared/components/FormElements/Button';\nimport Modal from '../../shared/components/UIElements/Modal';\nimport Map from '../../shared/components/UIElements/Map';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport './PlaceItem.css';\nimport ErrorModal from 'shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from 'shared/components/UIElements/LoadingSpinner';\n\nconst PlaceItem = (props) => {\n  const { sendRequest, isLoading, error, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n  const [isMapShowing, setMapShowing] = useState(false);\n  const [isConfirmModalShowing, setConfirmModalShowing] = useState(false);\n\n  const openMap = () => setMapShowing(true);\n\n  const closeMap = () => setMapShowing(false);\n\n  const showDeleteWarning = () => setConfirmModalShowing(true);\n\n  const cancelDelete = () => setConfirmModalShowing(false);\n\n  const confirmDelete = async () => {\n    // You need to close the confirm modal before sending request so that\n    // when error modal opens up there won't be two modals opened up at the same time\n    setConfirmModalShowing(false);\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/places/${props.id}`,\n        'DELETE',\n        null,\n        {\n          Authorization: 'Bearer ' + auth.token,\n        }\n      );\n    } catch (err) {}\n    props.onDelete(props.id);\n    console.log('deleting...');\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {/* map modal */}\n      <Modal\n        show={isMapShowing}\n        onCancel={closeMap}\n        header={props.address}\n        contentClass=\"place-item__modal-content\"\n        footerClass=\"place-item__modal-actions\"\n        footer={<Button onClick={closeMap}>CLOSE</Button>}\n      >\n        <div className=\"map-container\">\n          <Map center={props.coordinates} zoom={16}></Map>\n        </div>\n      </Modal>\n      {/* delete confirmation modal */}\n      <Modal\n        show={isConfirmModalShowing}\n        onCancel={cancelDelete}\n        header=\"Are you sure?\"\n        footerClass=\"place-item__modal-actions\"\n        footer={\n          <>\n            <Button inverse onClick={cancelDelete}>\n              CANCEL\n            </Button>\n            <Button danger onClick={confirmDelete}>\n              DELETE\n            </Button>\n          </>\n        }\n      >\n        <p>\n          Do you want to proceed and delete this place? You CANNOT UNDO this\n          action.\n        </p>\n      </Modal>\n      {/* Main place card */}\n      <li className={`place-item ${props.className}`} style={props.style}>\n        <Card className=\"place-item__content\">\n          {/* Confirm modal is closed when clicked on either cancel/delete */}\n          {/* Therefore the spinner is going to be on the item that's being deleted */}\n          {isLoading && <LoadingSpinner asOverlay />}\n          <div className=\"place-item__image\">\n            <img\n              src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`}\n              alt={props.title}\n            />\n          </div>\n          <div className=\"place-item__info\">\n            <h2>{props.title}</h2>\n            <h3>{props.address}</h3>\n            <p>{props.description}</p>\n          </div>\n          <div className=\"place-item__actions\">\n            <Button inverse onClick={openMap}>\n              VIEW ON MAP\n            </Button>\n            {auth.userId === props.creatorId && (\n              <Button to={`/places/${props.id}`}>EDIT</Button>\n            )}\n            {auth.userId === props.creatorId && (\n              <Button danger onClick={showDeleteWarning}>\n                DELETE\n              </Button>\n            )}\n          </div>\n        </Card>\n      </li>\n    </React.Fragment>\n  );\n};\n\nPlaceItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  address: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  coordinates: PropTypes.shape({\n    lat: PropTypes.number.isRequired,\n    lng: PropTypes.number.isRequired,\n  }).isRequired,\n  // id of the user who created this place\n  creatorId: PropTypes.string.isRequired,\n  // id of this place item\n  id: PropTypes.string.isRequired,\n};\n\nexport default PlaceItem;\n","import React from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport PlaceItem from './PlaceItem';\nimport Button from '../../shared/components/FormElements/Button';\n\nimport './PlaceList.css';\n\nconst PlaceList = (props) => {\n  if (props.items.length === 0) {\n    return (\n      <div className=\"place-list center\">\n        <Card>\n          <h2>No places found. Create a new place!</h2>\n          <Button to=\"/places/new\">Create Place</Button>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <ul className={`place-list ${props.className}`} style={props.style}>\n      {props.items.map((place) => (\n        <PlaceItem\n          key={place.id}\n          id={place.id}\n          // We had different named field in backend\n          image={place.image}\n          title={place.title}\n          description={place.description}\n          address={place.address}\n          creatorId={place.creator}\n          coordinates={place.location}\n          onDelete={props.onDeletePlace}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default PlaceList;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useHttpClient } from 'shared/hooks/http-hook';\n\nimport PlaceList from '../components/PlaceList';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\n\nconst UserPlaces = (props) => {\n  const [loadedPlaces, setLoadedPlaces] = useState([]);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const userId = useParams().userId;\n\n  useEffect(() => {\n    const fetchPlaces = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`\n        );\n\n        /*\n          The backend sends this response:\n          return res.json({\n            places: userWithPlaces.places.map((place) =>\n            place.toObject({ getters: true })\n            ),\n          });\n        */\n        setLoadedPlaces(responseData.places);\n      } catch (err) {}\n    };\n    fetchPlaces();\n    // userId won't change as long as we're on the same page with the same logged in user\n  }, [sendRequest, userId]);\n\n  /**\n   * Update UI when place is deleted\n   * @param {string} deletedPlaceId\n   */\n  const handlePlaceDelete = (deletedPlaceId) => {\n    setLoadedPlaces((prevPlaces) =>\n      prevPlaces.filter((place) => place.id !== deletedPlaceId)\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner asOverlay />\n        </div>\n      )}\n      {!isLoading && loadedPlaces && (\n        <PlaceList items={loadedPlaces} onDeletePlace={handlePlaceDelete} />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UserPlaces;\n"],"sourceRoot":""}